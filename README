ransha
e.dozortseva


=============================
=      File description     =
=============================
// MAIN
Sjavac.java - The Manager module
Scope.java - abstract class that defines Scope
SJavaFile.java - class that defines object File
SJavaException.java - Class that is ancestor to all the exceptions in the excercise
UnbalancedBracketsException.java - exception is thrown if unbalanced bracket occurs

//PARSING 
FileParser.java - The Parsing Module
IllegalSJavaFileException.java - exception is thrown if illegal SJava file is parsed

//INNER SCOPE
InnerScope.java - class that defines inner scope of the File
InnerScopeFactory.java - creates simple inner scopes (not methods)
IllegalInnerScopeException.java - exception is thrown if inner scope is defined illegaly
BadInnerScopeArgument.java - exception is thrown if illegal argument is used to open inner scope
NoSuchInnerScopeException.java - exception is thrown if not defined kinds of inner scope is created

	//METHODS
Method.java - class defines method as kind of inner scope
MethodFactory.java - creates methods
IllegalMethodException.java - class  is ancestor to all exceptions concerning methods
IllegalInitLineException.java - exception is thrown if method is initialized illegaly
IllegalMethodNameException.java - exception is thrown if method with illegal name is created
IllegalMethodCallException.java - exception is thrown if method is called illegaly
IllegalParamsException.java - exception is thrown if method is called with illegal parameters

//VARIABLES
VariableType.java - class that defines legal variable types for this SJavaFile
Variable.java - class that defines variable
VariableFactory.java - creates variables
VariableException.java - class that is ancestor to all the exceptions concerning variables
AssignToFinalException.java - exception is thrown if new value is assigned to final variable
BadVariableLineException.java - exception is thrown if variable is initialized illegaly
BadVariableValueException.java - exception is thrown if illegal variable is assigned to a variable
BadVariableNameException.java - exception is thrown if illegal name is given to a variable
EmptyVariableException.java - exception is thrown when uninitialized variable is called
NoSuchTypeException.java - exception id thrown if variable is created of illegal type
VariableNameOverloadException.java - exception is thrown if new variable is created with name of existing one

=============================
=          Design           =
=============================
6.2 
We've followed in some way the module design of ex5.
 First we have three biggest modules:
 SJavac - manager module
 FileParser - parsing module
 Scope - reading and code validity check module
 
There are two types of content allowed in sjava file:
-Variable - like primitives in java, can be initialized and used(both in one line),
			have limited amount of possible types
			types are defined by VariableType					
-Scope - have inner content to be read

Scope itself has modular structure which was guided by different types of scopes that can occur in the file
The hierarchy is as below:
Scope(abstract)     -SJavaFile
					-InnerScope - Methods

The biggest Scope possible is SJavaFile. And there are two types of Inner Scopes : 
If/While blocks = simple InnerScopes, can be read can not be called
Methods = advanced inner scopes, can be called after defined once, have more reading specifics

The Modularity of the chosen design allowed us to solved occured problems with reasonable effort,
and also, as you will see below, allows us to add more functionality, if needed also without any critical
design changes.

Process:
SJavac has the main method, gets the path to the file that is supposed to be checked.
Calls for FileParser to parse the file's content into list of sensible lines(if valid at all)
The outmost Scope(SJavaFile) is created and read. During reading File checks if all the lines are or
variables definition or methods definition, and creates new objects accordingly. Afterwards inner scopes
Methods are read one by one. Inside the method legal content are simple inner scopes, or variable activity,
or method calls. If inner scopes are found while reading they are read as soon as created.


FLOAT
Our design allows us to add new variable type (ex. float) quite easily : new enum to VariableType class
FLOAT("float", "some float regex"). Where "some float regex" represents the regex that will capture
float values correctly when compiled.
 
 
SWITCH
To add support for switch statements we would create new package Switch and inside 
 -Switch.class- new subclass of InnerScope class, that will override parent's method readScope() and specify
 				it for it's syntax
 -SwitchFactory.class - factory for this types of inner scopes
 -SwitchExceptions - exceptions that occur when syntax is not legal
 
IMPORT
Every SJavaFile is started with
HashMap<String, Variable> myVariables
List<Method> myMethods
 When read, SJavaFile will start from looking for import lines in the beginning and file path. If found:
 this.myVariables.addAll(other.myVariables);
 this.myMehtods.addAll(other.myMethods)

=============================
=  Implementation details   =
=============================

6.1
ERROR HANDLING
We've decided to use Exceptions mechanism to define either the code is legal or not. 
Exception hierarchy:
														SJavaException
								    	/             										\
							      IllegalCodeException							IllegalSJavaFileException
						/		      \					    \
UnbalancedBracketsException		InnerScopeException:	   VariablesException:
						-BadInnerScopeArgumnetsException	-NoSuchTypeException
						-IllegalInnerScopeException			-AssignToFinalException
						-NoSuchInnerScopeException			-BadVariableLineException
						-MethodException:					-BadVaribaleNameException
							-IllegalInitLineException		-BadVariableValueException
							-IllegalMetodCallException		-EmptyVariableException
							-IllegalMethodNameException		-VariableNameOverloadException
							-IllegalParamsException
			
6.3
REGULAR EXPRESSIONS

ValidType.DOUBLE:
	"\\s*(-?\\d+(?:\\.\\d+)?)\\s*"
- the pattern compiled from this regex is supposed to match any double in text.
It can start with spaces(from zero), than the capturing group actually captures the double value:
it can have or not have minus, followed by any amount(more then 1) of any digits 
and after there can be or not be the group that starts with "." and followed by any
amount of digits(more then 1).
All this can be followed by spaces in amount >=0
It can start with spaces(from zero), than the capturing group actually captures:
 
Scope.ValidLine.METHOD_CALL: 	
	"^\\s*[A-Za-z]\\w*\\s*\\(.*\\)\\s*;$"
- the pattern compiled from this regex is supposed to match any method call in text.
It can start with spaces(from zero), then there has to be method name which means it has to start with letter,
and may be followed by anything from the list A-Z, a-z, 0-9,"_".
Afterwards there may be spaces(from zero).
Then it has to be followed by some expression inside the brackets().
And the line has to end with ";"

	
DATA STRUCTURES

Every Scope holds data member myVariables - that saves all the variables created in this Scope. 
We have decided to use HashMap<String, Variable> data structure, to easily search for variables by name.


SJavaFile holds data member myMethods that saves all the methods defined in the File. We've decided to use 
List<Method> data structure to allow iteration over it while reading the file.

Also every method holds data member arguments that saves all the arguments(as default variables with null 
value but saved as initialized) needed to call for the method. We've decided to use List<Variable>
 data structure because we need to iterate over it while checking legitimacy of the method call and don't 
 need to search for them.


						